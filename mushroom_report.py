# -*- coding: utf-8 -*-
"""mushroom Report

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SfLipI4MrRNT_DonkWRPfUODBRC2dFJr
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/mushroom project.csv')
df.head()

"""first 5 rows"""

df.tail()

"""last 5 rows """

df.shape

"""there are 8124 rows and 23 columns"""

df.isnull().sum()

"""there is no null values """

sns.countplot(df['class'])

"""using count plot method class vs count graph

"""

plt.figure(figsize = (16,6))
g = sns.catplot(x="cap-shape", hue="cap-color", col="class",
                data=df, kind="count",
                height=8, aspect=.7);

"""1)  white coloured and bell shaped mushrooms are highly recommended for eating
2)Red coloure and knob shaped are poisonous 
"""

df.columns

"""colums present in mashoom data"""

plt.figure(figsize = (14,6))
g = sns.catplot(x="odor", hue="bruises", col="class",data=df, kind="count",       height=8, aspect=.7 , palette = 'inferno');

"""odourless and brusished mushrooms are highly recommended for eating
fishy odour with no bruises mushrooms are poisonous
"""

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder
df=df.apply(LabelEncoder().fit_transform)
df.head()

"""its as 5 rows and 23 colums and class are converted into numbers"""

x = df.drop(['class'],axis=1)
y = df['class']

from sklearn.model_selection import train_test_split
x_train , x_test , y_train , y_test = train_test_split(x,y,test_size = 0.3 , random_state = 0)

"""Decision Tree Model"""

from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier(random_state = 0 , max_depth = 5)
dt.fit(x_train , y_train)

"""DecisionTreeClassifier(max_depth=5,random_state=0)"""

dt.score(x_train,y_train)

"""according to DecistionTree modle performing 97% """

predictions = dt.predict(x_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test , predictions)

"""according to the DT prediction model performing 98%

Analysing using Random forest
"""

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(max_depth = 5)
rf.fit(x_train , y_train)
rf.score(x_train , y_train)

"""Acordding to Random Forest model performing 98%"""

predictions = rf.predict(x_test)
rf.score(x_test , y_test)

"""according to pridiction model peforming 99%

1. Decision Tree Accuracy - 98.2%
2. Random Forest Accuracy - 99%

Hence, Ramdom Forest is best than Decision Tree
"""

